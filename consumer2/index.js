const amqp = require('amqplib');
const { Client } = require('pg');

const EXCHANGE_NAME = 'messages_exchange';
const QUEUE_NAME = 'messages_queue';

const pgClient = new Client({
    user: 'postgres',
    host: 'postgres', // –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL
    database: 'messages_db',
    password: 'postgres',
    port: 5432,
});

pgClient.connect()
    .then(() => console.log('üõ¢Ô∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'))
    .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err));

const consumeMessages = async () => {
    try {
        const connection = await amqp.connect('amqp://guest:guest@rabbitmq');
        const channel = await connection.createChannel();

        await channel.assertQueue(QUEUE_NAME, { durable: false });
        channel.consume(QUEUE_NAME, async (msg) => {
            if (msg !== null) {
                const messageText = msg.content.toString();
                console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ: ${messageText}`);

                try {
                    await pgClient.query('INSERT INTO message2 (content) VALUES ($1)', [messageText]);
                    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ PostgreSQL');
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL:', err);
                }

                channel.ack(msg);
            }
        });

        console.log('üéß –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
};

consumeMessages();
